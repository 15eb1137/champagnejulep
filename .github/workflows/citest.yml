name: Continuous Integration (Test)

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

env:
  FLUTTER_VERSION: '3.7.12'
  WORKING_FLUTTER_DIRECTORY: 'flutter'
  GIT_EMAIL: '15eb1137@gmail.com'
  GIT_NAME: 'iori tobeta'


jobs:
  flutter_unit_tests:
    name: Flutter Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      - working-directory: ${{ env.WORKING_FLUTTER_DIRECTORY }}
        run: flutter pub get
      - name: Lint Check
        working-directory: ${{ env.WORKING_FLUTTER_DIRECTORY }}
        if: always()
        run: flutter analyze
      - name: Unit Tests
        working-directory: ${{ env.WORKING_FLUTTER_DIRECTORY }}
        if: always()
        run: flutter test test/unit_test.dart
      - name: Widget Tests
        working-directory: ${{ env.WORKING_FLUTTER_DIRECTORY }}
        if: always()
        run: flutter test test/widget_test.dart
  flutter_integration_tests_ios:
    name: Flutter Integration Tests iOS
    strategy:
      matrix:
        device:
          - "iPhone 8"
      fail-fast: false
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name : Check iOS Emulators
        run: |
          xcrun xctrace list devices | grep -v "Apple Watch" | grep "Simulator" | grep -v "Apple TV" | grep -v "==" | sed -r "s/^(.*) *Simulator.*\(([0-9\.]*)\).*\([0-9A-Z-]*\).*$/OS: \2\tName: \1/"
      - name: Start simulator
        run: |
          printf " - Device:\t %s \n" "${{ matrix.device }}"
          UDID_REGEX=".*\(([0-9A-Z-]+)\)$"
          UDID=$(
            xcrun xctrace list devices | grep "${{ matrix.device }} Simulator" |
              grep -v "Apple Watch" |
              sed -r "s/$UDID_REGEX/\1/"
          )
          xcrun simctl boot "${UDID:?No Simulator with this name found}"
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      - working-directory: ${{ env.WORKING_FLUTTER_DIRECTORY }}
        run: flutter pub get
      - working-directory: ${{ env.WORKING_FLUTTER_DIRECTORY }}
        run: flutter test integration_test/app_test.dart
  flutter_integration_tests_android:
    name: Flutter Integration Tests Android
    strategy:
      matrix:
        device:
          - api-level: 18
            arch: x86
            target: default
          - api-level: 31
            arch: x86_64
            target: default
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name : Check Android Emulators
        run: |
          cd "$ANDROID_SDK_ROOT/tools/bin" || exit 1
          ./sdkmanager --list 2> /dev/null | grep "system-images" | grep -v "\-tv" | grep -v "Sandbox" | grep -v "android-wear" | sed -r "s/^[^;]*;android-([0-9]*);([^;]*);([^; ]*).*$/API: \1\tARCH: \3\tTARGET: \2/" | expand -t 10,35
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '11'
          cache: 'gradle'
      - uses: gradle/gradle-build-action@v2
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}
      - name: reboot adb
        run: |
          adb kill-server
          adb start-server
      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      - working-directory: ${{ env.WORKING_FLUTTER_DIRECTORY }}
        run: flutter pub get
      - working-directory: ${{ env.WORKING_FLUTTER_DIRECTORY }}
        run: flutter test integration_test/app_test.dart
      - uses: reactivecircus/android-emulator-runner@v2
        with:
          working-directory: ${{ env.WORKING_FLUTTER_DIRECTORY }}
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            flutter test integration_test/app_test.dart
